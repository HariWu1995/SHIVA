import functools
from collections import OrderedDict


loaders_and_params = OrderedDict({
    'Transformers': [
        'cpu',
        'gpu_memory',
        'cpu_memory',
        'auto_devices',
        'disk',
        'no_cache',
        'use_bf16',
        'trust_remote_code',
        'use_safetensors',
        'use_fast_tokenizer',
        'use_flash_attention_2',
        'attn_implementation',
        'torch_compile',
        'load_in_8bit',
        'load_in_4bit',
        'use_double_quant',
        'quant_type',
        'compute_dtype',
        'alpha_value',
        'compress_pos_emb',
    ],
    'llama.cpp': [
        'cpu',
        'flash_attn',
        'tensorcores',
        'n_ctx',
        'n_batch',
        'n_threads',
        'n_threads_batch',
        'mul_mat_q',
        'use_mmap',
        'use_mlock',
        'numa',
        'n_gpu_layers',
        'tensor_split',
        'offload_kqv',
        'streaming_llm',
        'attention_sink_size',
        'rope_freq_base',
        'compress_pos_emb',
        'cache_type',
        'split_mode',
    ],
    'llamacpp_HF': [
        'n_gpu_layers',
        'n_threads',
        'n_threads_batch',
        'n_batch',
        'n_ctx',
        'cache_type',
        'tensor_split',
        'rope_freq_base',
        'compress_pos_emb',
        'attention_sink_size',
        'tensorcores',
        'flash_attn',
        'streaming_llm',
        'cpu',
        'split_mode',
        'offload_kqv',
        'mul_mat_q',
        'use_mmap',
        'use_mlock',
        'numa',
        'cfg_cache',
        'logits_all',
        'trust_remote_code',
        'use_fast_tokenizer',
        'llamacpp_HF_info',
    ],
    'ExLlamav3_HF': [
        'max_seq_len',
        'gpu_split',
        'cfg_cache',
        'trust_remote_code',
        'use_fast_tokenizer',
    ],
    'ExLlamav2_HF': [
        'max_seq_len',
        'cache_type',
        'gpu_split',
        'alpha_value',
        'compress_pos_emb',
        'num_experts_per_token',
        'autosplit',
        'enable_parallel',
        'no_flash_attn',
        'no_xformers',
        'no_sdpa',
        'cfg_cache',
        'trust_remote_code',
        'use_fast_tokenizer',
    ],
    'ExLlamav2': [
        'max_seq_len',
        'cache_type',
        'gpu_split',
        'alpha_value',
        'compress_pos_emb',
        'num_experts_per_token',
        'autosplit',
        'enable_parallel',
        'use_fast_tokenizer',
        'no_xformers',
        'no_sdpa',
        'exllamav2_info',
    ],
    'TensorRT-LLM': [
        'max_seq_len',
        'cpp_runner',
        'tensorrt_llm_info',
    ]
})


loaders_samplers = {
    'Transformers': {
        'temperature','dynamic_temperature','temperature_last',
        'dynatemp_low','dynatemp_high','dynatemp_exponent',
        'smoothing_factor','smoothing_curve',
        'min_p','top_p','typical_p',
        'top_k','top_a','top_n_sigma',
        'xtc_threshold','xtc_probability',
        'eps_cutoff','eta_cutoff',
        'tfs',
        'dry_multiplier','dry_length','dry_base','dry_sequence_breakers',
        'penalty_alpha',
        'frequency_penalty','presence_penalty','encoder_repetition_penalty',
        'repetition_penalty',
        'repetition_penalty_range',
        'no_repeat_ngram_size',
        'guidance_scale',
        'mirostat_mode','mirostat_tau','mirostat_eta',
        'prompt_lookup_num_tokens',
        'auto_max_new_tokens',
        'ban_eos_token','add_bos_token','skip_special_tokens','custom_token_bans',
        'static_cache',
        'seed',
        'do_sample','sampler_priority',
        'negative_prompt',
        'grammar_string','grammar_file',
    },
    'ExLlamav3_HF': {
        'temperature','dynamic_temperature','temperature_last',
        'dynatemp_low','dynatemp_high','dynatemp_exponent',
        'smoothing_factor','smoothing_curve',
        'min_p','top_p','typical_p',
        'top_k','top_a','top_n_sigma',
        'xtc_threshold','xtc_probability',
        'eps_cutoff','eta_cutoff',
        'tfs',
        'dry_multiplier','dry_length','dry_base','dry_sequence_breakers',
        'frequency_penalty','presence_penalty','encoder_repetition_penalty',
        'repetition_penalty','repetition_penalty_range','no_repeat_ngram_size',
        'mirostat_mode','mirostat_tau','mirostat_eta',
        'auto_max_new_tokens',
        'ban_eos_token','add_bos_token','skip_special_tokens','custom_token_bans',
        'seed',
        'guidance_scale','negative_prompt',
        'do_sample','sampler_priority',
        'grammar_string','grammar_file',
    },
    'ExLlamav2_HF': {
        'temperature','dynamic_temperature','temperature_last',
        'dynatemp_low','dynatemp_high','dynatemp_exponent',
        'smoothing_factor','smoothing_curve',
        'min_p','top_p','typical_p',
        'top_k','top_a','top_n_sigma',
        'xtc_threshold','xtc_probability',
        'eps_cutoff','eta_cutoff',
        'tfs',
        'dry_multiplier','dry_length','dry_base','dry_sequence_breakers',
        'frequency_penalty','presence_penalty','encoder_repetition_penalty',
        'no_repeat_ngram_size','repetition_penalty','repetition_penalty_range',
        'mirostat_mode','mirostat_tau','mirostat_eta',
        'auto_max_new_tokens','ban_eos_token','add_bos_token','skip_special_tokens','custom_token_bans',
        'seed',
        'do_sample','sampler_priority',
        'guidance_scale','negative_prompt',
        'grammar_string','grammar_file',
    },
    'ExLlamav2': {
        'temperature','dynamic_temperature','temperature_last',
        'dynatemp_low','dynatemp_high','dynatemp_exponent',
        'smoothing_factor',
        'min_p','top_p','typical_p',
        'top_k','top_a',
        'xtc_threshold','xtc_probability',
        'tfs',
        'dry_multiplier','dry_length','dry_base','dry_sequence_breakers',
        'frequency_penalty','presence_penalty',
        'repetition_penalty','repetition_penalty_range',
        'mirostat_mode','mirostat_tau','mirostat_eta',
        'auto_max_new_tokens','ban_eos_token','add_bos_token','skip_special_tokens','custom_token_bans',
        'seed',
    },
    'llama.cpp': {
        'temperature',
        'min_p','top_p','typical_p',
        'top_k',
        'tfs',
        'repetition_penalty','frequency_penalty','presence_penalty',
        'mirostat_mode','mirostat_tau','mirostat_eta',
        'ban_eos_token','custom_token_bans',
        'seed',
        'grammar_string','grammar_file',
    },
    'llamacpp_HF': {
        'temperature','dynamic_temperature','temperature_last',
        'dynatemp_low','dynatemp_high','dynatemp_exponent',
        'smoothing_factor','smoothing_curve',
        'min_p','top_p','typical_p',
        'top_k','top_a','top_n_sigma',
        'xtc_threshold','xtc_probability',
        'eps_cutoff','eta_cutoff',
        'tfs',
        'dry_multiplier','dry_length','dry_base','dry_sequence_breakers',
        'frequency_penalty','presence_penalty','encoder_repetition_penalty',
        'no_repeat_ngram_size','repetition_penalty','repetition_penalty_range',
        'mirostat_mode','mirostat_tau','mirostat_eta',
        'auto_max_new_tokens','ban_eos_token','add_bos_token','skip_special_tokens',
        'custom_token_bans',
        'seed',
        'do_sample','sampler_priority',
        'negative_prompt','guidance_scale',
        'grammar_string','grammar_file',
    },
    'TensorRT-LLM': {
        'temperature',
        'top_p','top_k',
        'repetition_penalty','frequency_penalty','presence_penalty',
        'auto_max_new_tokens','ban_eos_token',
    }
}


@functools.cache
def list_all_samplers():
    all_samplers = set()
    for k in loaders_samplers:
        for sampler in loaders_samplers[k]:
            all_samplers.add(sampler)
    return sorted(all_samplers)


@functools.cache
def get_all_params():
    all_params = set()
    for k in loaders_and_params:
        for el in loaders_and_params[k]:
            all_params.add(el)
    return sorted(all_params)

